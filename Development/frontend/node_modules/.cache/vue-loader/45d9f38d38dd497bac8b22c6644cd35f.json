{"remainingRequest":"E:\\DesignWork\\PROGRAMMING\\Tools-Specific-Projects\\Javascript\\Personal Projects\\Web Apps\\ON PROGRESS\\Emotion-Based-Music-Streaming-App-WEB\\Development\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!E:\\DesignWork\\PROGRAMMING\\Tools-Specific-Projects\\Javascript\\Personal Projects\\Web Apps\\ON PROGRESS\\Emotion-Based-Music-Streaming-App-WEB\\Development\\frontend\\src\\components\\Sketches\\SketchP5.vue?vue&type=template&id=2e32e4c6&scoped=true","dependencies":[{"path":"E:\\DesignWork\\PROGRAMMING\\Tools-Specific-Projects\\Javascript\\Personal Projects\\Web Apps\\ON PROGRESS\\Emotion-Based-Music-Streaming-App-WEB\\Development\\frontend\\src\\components\\Sketches\\SketchP5.vue","mtime":1609625284547},{"path":"E:\\DesignWork\\PROGRAMMING\\Tools-Specific-Projects\\Javascript\\Personal Projects\\Web Apps\\ON PROGRESS\\Emotion-Based-Music-Streaming-App-WEB\\Development\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\DesignWork\\PROGRAMMING\\Tools-Specific-Projects\\Javascript\\Personal Projects\\Web Apps\\ON PROGRESS\\Emotion-Based-Music-Streaming-App-WEB\\Development\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\DesignWork\\PROGRAMMING\\Tools-Specific-Projects\\Javascript\\Personal Projects\\Web Apps\\ON PROGRESS\\Emotion-Based-Music-Streaming-App-WEB\\Development\\frontend\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":499162500000},{"path":"E:\\DesignWork\\PROGRAMMING\\Tools-Specific-Projects\\Javascript\\Personal Projects\\Web Apps\\ON PROGRESS\\Emotion-Based-Music-Streaming-App-WEB\\Development\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\DesignWork\\PROGRAMMING\\Tools-Specific-Projects\\Javascript\\Personal Projects\\Web Apps\\ON PROGRESS\\Emotion-Based-Music-Streaming-App-WEB\\Development\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIiIGlkPSJwNUNhbnZhcyI+CiAgPC9kaXY+Cg=="},{"version":3,"sources":["E:\\DesignWork\\PROGRAMMING\\Tools-Specific-Projects\\Javascript\\Personal Projects\\Web Apps\\ON PROGRESS\\Emotion-Based-Music-Streaming-App-WEB\\Development\\frontend\\src\\components\\Sketches\\SketchP5.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACxD,CAAC,CAAC,CAAC,CAAC,CAAC","file":"E:/DesignWork/PROGRAMMING/Tools-Specific-Projects/Javascript/Personal Projects/Web Apps/ON PROGRESS/Emotion-Based-Music-Streaming-App-WEB/Development/frontend/src/components/Sketches/SketchP5.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"d-flex justify-content-center\" id=\"p5Canvas\">\n  </div>\n</template>\n\n<script>\n// @ts-nocheck\nimport { onMounted } from 'vue';\n\nimport p5 from 'p5';\nimport io from 'socket.io-client';\n\n// Utilities\nimport { createBGStars, drawGalaxyBG } from '@/components/Utils/p5/bg';\nimport { createMap, drawMap } from '@/components/Utils/p5/emotionMap';\nimport { drawSongDots } from '@/components/Utils/p5/songVisualisation';\nimport { createNewNeighbours, createHistoricalNeighbours, drawNeighbours } from '@/components/Utils/p5/neighboursVisualisation';\n\nimport { indicesToMood, coordinatesToIndices } from '@/components/Utils/logic/algorithm';\n\nimport { handlingSongsData, removeATempPlaylist } from '@/handlers/spotify';\n\nexport default {\n  name: 'SketchP5',\n  setup() {\n    /* eslint-disable no-console */\n    /* eslint-disable padded-blocks */\n    /* eslint-disable no-trailing-spaces */\n    /* eslint-disable-next-line linebreak-style */\n    /* eslint-disable no-multiple-empty-lines */\n    /* eslint-disable semi */\n    /* eslint-disable indent */\n    /* eslint-disable no-unused-vars */\n    /* eslint-disable max-len */\n    /* eslint-disable no-param-reassign */\n    /* eslint-disable no-new */\n    /* eslint-disable no-plusplus */\n    /* eslint-disable new-cap */\n    /* eslint-disable camelcase */\n\n    const sketch = (p) => {\n      // disables FES\n      // eslint-disable-next-line no-param-reassign\n      p.disableFriendlyErrors = true;\n\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n\n      let starDots = [];\n      let history = [];\n\n      const galaxy = [];\n      const chosenPoints = [];\n\n      const stars = Array(360);\n\n      const showMap = false;\n      let isClicked = false;\n\n      let socket = null;\n\n      // in one machine, only two types of data emit from this socket connection\n      // 1: HISTORICAL DATA (when first open the app)\n      // 2: NEW DATA (when other users choose a coordinates closely to others)\n      function userDataEmit(curent_data) {\n        // check if it is the first HISTORICAL data emit\n        // because a HISTORICAL data emit is in a form of an array (not undefined)\n        // this condition statement is to store the historical data to a global variable\n        if (curent_data.length !== undefined) {\n          // check if a user is not the first connection to the system\n          // because first users don't need historical data\n          if (curent_data.length !== 0) {\n            // shallow copy the data and assign it to a global array\n            history = [...curent_data];\n            console.log(history);\n          }\n\n        // check if it is a current event\n        } else {\n          // receive the NEW data broadcasted by OTHER USERS\n          // and push it to neighbours array\n          createNewNeighbours(curent_data, chosenPoints, width, height);\n        }\n        console.log(`Other User Data: ${curent_data.i}, ${curent_data.j}`);\n        // console.log(`My Data: ${chosenPoints[0]}, ${chosenPoints[1]}`);\n      }\n\n      function getSocket() {\n        // handling production and development mode\n        const PRODUCTION = process.env.NODE_ENV;\n\n        const URL = (PRODUCTION === 'production') ? '' : 'http://localhost:5000';\n        socket = io.connect(URL);\n\n        socket.on('connect', () => {\n          console.log('Successfully Connected');\n        });\n\n        socket.on('click', userDataEmit);\n\n        socket.on('error', (err) => {\n          console.log(err);\n        });\n      }\n\n      p.setup = () => {\n        p.createCanvas(width, height).parent('p5Canvas');\n        p.ellipseMode(p.CENTER);\n        p.rectMode(p.CENTER);\n\n        // socket.io\n        getSocket();\n\n        // make bg\n        createBGStars(width, height, stars, galaxy, p);\n\n        // make emotion map\n        starDots = createMap(width, height, starDots, p);\n      };\n      p.draw = () => {\n        p.background(10);\n        drawGalaxyBG(galaxy, p);\n\n        // The Emotion Map\n        drawMap(width, height, isClicked, starDots, chosenPoints, p);\n\n        // Song Dots\n        drawSongDots(starDots, chosenPoints, width, height, p5);\n\n        // Neighbours\n        drawNeighbours(p);\n      };\n\n      p.mousePressed = () => {\n\n        // only clickable when the emotion map is shown\n        for (let i = 0; i < starDots.length; i++) {\n          for (let j = 0; j < starDots[i].length; j++) {\n\n            if (starDots[i][j].onHover()) {\n              console.log(i / starDots.length, 1 - j / starDots[i].length);\n              console.log(i, j);\n\n              // mapping algorithm to get the valence and arousal values by getting the percentage of an index to the max value\n              const mood = indicesToMood(i, j, starDots);\n\n              isClicked = true;\n              chosenPoints.push(i, j);\n\n              // send data to the server via socket\n              const data = {\n                i,\n                j,\n                size: starDots[i][j].size,\n              }\n              socket.emit('click', data);\n\n              // HISTORICAL USERS\n              // use the history array available globally after collecting it the first time\n              // and push it t0 neighbours array as well\n              createHistoricalNeighbours(history, chosenPoints, width, height);\n\n              // get songs data from Spotify via the server\n              handlingSongsData(Number(mood.valence.toFixed(3)), Number(mood.arousal.toFixed(3)), starDots, chosenPoints, width, height, p);\n            }\n          }\n        }\n      }\n\n      p.mouseDragged = () => {\n\n        removeATempPlaylist();\n\n        // convert the mapping algorithm to indices\n        // move the chosen point to other locations\n        const indices = coordinatesToIndices(width, height, p);\n        chosenPoints[0] = indices.i;\n        chosenPoints[1] = indices.j;\n      }\n\n    };\n\n    onMounted(() => {\n      new p5(sketch);\n    });\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/sass/Unique/_bg';\n</style>\n"]}]}